#!/usr/bin/env python3
"""
Environment Setup Helper
This script helps you set up your environment variables for the Portfolio Rebalancer app.
"""

import os
import secrets
import shutil
import argparse
from pathlib import Path


def generate_secret_key():
    """Generate a secure secret key."""
    return secrets.token_hex(32)


def setup_environment_interactive():
    """Interactive setup for environment variables (for advanced users)."""
    print("üöÄ Portfolio Rebalancer Interactive Environment Setup")
    print("=" * 50)
    
    # Check if .env already exists
    env_file = Path(".env")
    if env_file.exists():
        response = input("\n‚ö†Ô∏è  .env file already exists. Overwrite? (y/N): ")
        if response.lower() != 'y':
            print("Setup cancelled.")
            return
    
    # Generate new secret key
    secret_key = generate_secret_key()
    
    # Interactive setup
    print("\nüìù Environment Configuration:")
    print(f"\n1. SECRET_KEY: Generated automatically")
    print(f"   Value: {secret_key[:8]}...{secret_key[-8:]}")
    
    # Database configuration
    print("\n2. DATABASE_URL:")
    print("   Options:")
    print("   a) SQLite (default, good for development)")
    print("   b) PostgreSQL (recommended for production)")
    db_choice = input("   Choose (a/b) [a]: ").lower() or 'a'
    
    if db_choice == 'b':
        print("\n   PostgreSQL Configuration:")
        db_user = input("   Username [postgres]: ") or "postgres"
        db_pass = input("   Password: ")
        db_host = input("   Host [localhost]: ") or "localhost"
        db_name = input("   Database name [portfolio_db]: ") or "portfolio_db"
        database_url = f"postgresql://{db_user}:{db_pass}@{db_host}/{db_name}"
    else:
        database_url = "sqlite:///app/database/portfolio.db"
    
    # Flask environment
    print("\n3. FLASK_ENV:")
    print("   Options: development, testing, production")
    flask_env = input("   Choose [development]: ") or "development"
    
    # Write to .env file
    env_vars = {
        "SECRET_KEY": secret_key,
        "DATABASE_URL": database_url,
        "FLASK_ENV": flask_env
    }
    
    _write_env_file(env_vars)


def _write_env_file(env_vars):
    """Write environment variables to .env file."""
    with open(".env", "w") as f:
        f.write("# Portfolio Rebalancer Environment Configuration\n")
        f.write("# Generated by setup_env.py\n\n")
        
        for key, value in env_vars.items():
            f.write(f"{key}={value}\n")
    
    print("\n‚úÖ Environment setup complete!")
    print("\nüìÑ Created .env file with:")
    for key in env_vars:
        if key == "SECRET_KEY":
            print(f"   - {key}: ***hidden***")
        else:
            print(f"   - {key}: {env_vars[key]}")
    
    print("\nüîí Security Notes:")
    print("   - .env file is gitignored (won't be committed)")
    print("   - Keep your SECRET_KEY secure")
    print("   - Use different keys for development and production")
    
    print("\nüöÄ To run the app:")
    print("   python run.py --port 5000")


def setup_environment(production=False):
    """Automatic setup for environment variables with sensible defaults."""
    print("üöÄ Portfolio Rebalancer Environment Setup")
    print("=" * 50)
    
    # Check if .env already exists
    env_file = Path(".env")
    if env_file.exists():
        print("‚ö†Ô∏è  .env file already exists. Backing up existing file...")
        backup_file = Path(f".env.backup.{int(os.path.getmtime('.env'))}")
        shutil.copy(".env", backup_file)
        print(f"‚úì Existing .env backed up to {backup_file}")
    
    # Generate new secret key
    secret_key = generate_secret_key()
    
    # Use sensible defaults - no user interaction required
    print("\nüìù Environment Configuration (using defaults):")
    print(f"\n1. SECRET_KEY: Generated automatically")
    print(f"   Value: {secret_key[:8]}...{secret_key[-8:]}")
    
    # Default database configuration (SQLite)
    print("\n2. DATABASE_URL: Using SQLite (default)")
    database_url = "sqlite:///app/database/portfolio.db"
    print(f"   Value: {database_url}")
    
    # Default Flask environment
    flask_env = "production" if production else "development"
    env_type = "production" if production else "development (default)"
    print(f"\n3. FLASK_ENV: Using {env_type}")
    print(f"   Value: {flask_env}")
    
    # Write to .env file
    env_vars = {
        "SECRET_KEY": secret_key,
        "DATABASE_URL": database_url,
        "FLASK_ENV": flask_env
    }
    
    _write_env_file(env_vars)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Set up environment variables for Portfolio Rebalancer')
    parser.add_argument('--interactive', '-i', action='store_true',
                        help='Run interactive setup with prompts (default: automatic setup)')
    parser.add_argument('--production', '-p', action='store_true',
                        help='Set up for production environment (FLASK_ENV=production)')
    
    args = parser.parse_args()
    
    if args.interactive:
        setup_environment_interactive()
    else:
        # Modify environment for production if requested
        if args.production:
            print("üè≠ Setting up for PRODUCTION environment")
            print("‚ö†Ô∏è  Using production defaults...")
        setup_environment(production=args.production)