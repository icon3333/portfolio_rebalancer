import os
import sys
import secrets
import shutil
from pathlib import Path
from app.main import create_app
import argparse


def generate_secret_key():
    """Generate a secure secret key."""
    return secrets.token_hex(32)


def setup_environment_interactive():
    """Interactive setup for environment variables (for advanced users)."""
    print("üöÄ Portfolio Rebalancer Interactive Environment Setup")
    print("=" * 50)
    
    # Check if .env already exists
    env_file = Path(".env")
    if env_file.exists():
        response = input("\n‚ö†Ô∏è  .env file already exists. Overwrite? (y/N): ")
        if response.lower() != 'y':
            print("Setup cancelled.")
            return
    
    # Generate new secret key
    secret_key = generate_secret_key()
    
    # Interactive setup
    print("\nüìù Environment Configuration:")
    print(f"\n1. SECRET_KEY: Generated automatically")
    print(f"   Value: {secret_key[:8]}...{secret_key[-8:]}")
    
    # Database configuration
    print("\n2. DATABASE_URL:")
    print("   Options:")
    print("   a) SQLite (default, good for development)")
    print("   b) PostgreSQL (recommended for production)")
    db_choice = input("   Choose (a/b) [a]: ").lower() or 'a'
    
    if db_choice == 'b':
        print("\n   PostgreSQL Configuration:")
        db_user = input("   Username [postgres]: ") or "postgres"
        db_pass = input("   Password: ")
        db_host = input("   Host [localhost]: ") or "localhost"
        db_name = input("   Database name [portfolio_db]: ") or "portfolio_db"
        database_url = f"postgresql://{db_user}:{db_pass}@{db_host}/{db_name}"
    else:
        database_url = "sqlite:///instance/portfolio.db"
    
    # Flask environment
    print("\n3. FLASK_ENV:")
    print("   Options: development, testing, production")
    flask_env = input("   Choose [development]: ") or "development"
    
    # Write to .env file
    env_vars = {
        "SECRET_KEY": secret_key,
        "DATABASE_URL": database_url,
        "FLASK_ENV": flask_env
    }
    
    _write_env_file(env_vars)


def _write_env_file(env_vars):
    """Write environment variables to .env file."""
    with open(".env", "w") as f:
        f.write("# Portfolio Rebalancer Environment Configuration\n")
        f.write("# Generated by run.py environment setup\n\n")
        
        for key, value in env_vars.items():
            f.write(f"{key}={value}\n")
    
    print("\n‚úÖ Environment setup complete!")
    print("\nüìÑ Created .env file with:")
    for key in env_vars:
        if key == "SECRET_KEY":
            print(f"   - {key}: ***hidden***")
        else:
            print(f"   - {key}: {env_vars[key]}")
    
    print("\nüîí Security Notes:")
    print("   - .env file is gitignored (won't be committed)")
    print("   - Keep your SECRET_KEY secure")
    print("   - Use different keys for development and production")
    
    print("\nüöÄ To run the app:")
    print("   python run.py --port 5000")


def setup_environment(production=False):
    """Automatic setup for environment variables with sensible defaults."""
    print("üöÄ Portfolio Rebalancer Environment Setup")
    print("=" * 50)
    
    # Check if .env already exists
    env_file = Path(".env")
    if env_file.exists():
        print("‚ö†Ô∏è  .env file already exists. Backing up existing file...")
        backup_file = Path(f".env.backup.{int(os.path.getmtime('.env'))}")
        shutil.copy(".env", backup_file)
        print(f"‚úì Existing .env backed up to {backup_file}")
    
    # Generate new secret key
    secret_key = generate_secret_key()
    
    # Use sensible defaults - no user interaction required
    print("\nüìù Environment Configuration (using defaults):")
    print(f"\n1. SECRET_KEY: Generated automatically")
    print(f"   Value: {secret_key[:8]}...{secret_key[-8:]}")
    
    # Default database configuration (SQLite)
    print("\n2. DATABASE_URL: Using SQLite (default)")
    database_url = "sqlite:///instance/portfolio.db"
    print(f"   Value: {database_url}")
    
    # Default Flask environment
    flask_env = "production" if production else "development"
    env_type = "production" if production else "development (default)"
    print(f"\n3. FLASK_ENV: Using {env_type}")
    print(f"   Value: {flask_env}")
    
    # Write to .env file
    env_vars = {
        "SECRET_KEY": secret_key,
        "DATABASE_URL": database_url,
        "FLASK_ENV": flask_env
    }
    
    _write_env_file(env_vars)


def check_and_setup_environment():
    """Check if .env file exists and run setup if needed."""
    env_file = Path(".env")
    
    if not env_file.exists():
        print("üîß No .env file found. Running environment setup...")
        print("=" * 50)
        
        try:
            # Run the setup directly (no import needed)
            setup_environment()
            
            # Check if setup was successful
            if not env_file.exists():
                print("\n‚ùå Environment setup was cancelled or failed.")
                print("   Please run 'python run.py --setup-env' manually or create a .env file.")
                sys.exit(1)
                
        except KeyboardInterrupt:
            print("\n\n‚ùå Environment setup cancelled by user.")
            print("   Please run 'python run.py --setup-env' manually or create a .env file.")
            sys.exit(1)
        except Exception as e:
            print(f"\n‚ùå Error during environment setup: {e}")
            print("   Please run 'python run.py --setup-env' manually or create a .env file.")
            sys.exit(1)


# Create the Flask application at module level
# This is required for gunicorn to find the app object
app = create_app()

if __name__ == '__main__':
    # Parse command line arguments first to check for skip flag
    parser = argparse.ArgumentParser(
        description='Run the Portfolio Rebalancing Flask application')
    parser.add_argument('--port', type=int, default=5000,
                        help='Port to run the application on')
    parser.add_argument('--skip-setup', action='store_true',
                        help='Skip automatic environment setup check')
    parser.add_argument('--setup-env', action='store_true',
                        help='Run environment setup and exit')
    parser.add_argument('--setup-env-interactive', action='store_true',
                        help='Run interactive environment setup and exit')
    parser.add_argument('--production', action='store_true',
                        help='Set up for production environment (FLASK_ENV=production)')
    args = parser.parse_args()
    
    # Handle setup-only modes
    if args.setup_env_interactive:
        setup_environment_interactive()
        sys.exit(0)
    
    if args.setup_env:
        setup_environment(production=args.production)
        sys.exit(0)
    
    # Check environment setup before running (unless skipped)
    if not args.skip_setup:
        check_and_setup_environment()
    
    # Run the application with the specified port
    # Debug mode should be controlled by FLASK_ENV, not hardcoded
    debug_mode = os.environ.get('FLASK_ENV', 'development') == 'development'
    app.run(host='0.0.0.0', port=args.port, debug=debug_mode)
